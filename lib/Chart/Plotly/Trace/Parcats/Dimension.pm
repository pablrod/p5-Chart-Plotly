package Chart::Plotly::Trace::Parcats::Dimension;
use Moose;
use MooseX::ExtraArgs;
use Moose::Util::TypeConstraints qw(enum union);
if (!defined Moose::Util::TypeConstraints::find_type_constraint('PDL')) {
    Moose::Util::TypeConstraints::type('PDL');
}



# VERSION

# ABSTRACT: This attribute is one of the possible options for the trace parcats.

=encoding utf-8

=head1 SYNOPSIS

# EXAMPLE: examples/traces/parcats.pl

=head1 DESCRIPTION

This attribute is part of the possible options for the trace parcats.

This file has been autogenerated from the official plotly.js source.

If you like Plotly, please support them: L<https://plot.ly/> 
Open source announcement: L<https://plot.ly/javascript/open-source-announcement/>

Full reference: L<https://plot.ly/javascript/reference/#parcats>

=head1 DISCLAIMER

This is an unofficial Plotly Perl module. Currently I'm not affiliated in any way with Plotly. 
But I think plotly.js is a great library and I want to use it with perl.

=head1 METHODS

=cut

=head2 TO_JSON

Serialize the trace to JSON. This method should be called only by L<JSON> serializer.

=cut

sub TO_JSON {
    my $self = shift; 
    my $extra_args = $self->extra_args // {};
    my $meta = $self->meta;
    my %hash = %$self;
    for my $name (sort keys %hash) {
        my $attr = $meta->get_attribute($name);
        if (defined $attr) {
            my $value = $hash{$name};
            my $type = $attr->type_constraint;
            if ($type && $type->equals('Bool')) {
                $hash{$name} = $value ? \1 : \ 0;
            }
        }
    }
    %hash = (%hash, %$extra_args);
    delete $hash{'extra_args'};
    if ($self->can('type') && (!defined $hash{'type'})) {
        $hash{type} = $self->type();
    }
    return \%hash;
}

=head1 ATTRIBUTES

=over

=cut

=item * categoryarray

Sets the order in which categories in this dimension appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.

=cut

has categoryarray => (
    is => "rw",
    isa => "ArrayRef|PDL",
    documentation => "Sets the order in which categories in this dimension appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.",
);

=item * categoryarraysrc

Sets the source reference on Chart Studio Cloud for `categoryarray`.

=cut

has categoryarraysrc => (
    is => "rw",
    isa => "Str",
    documentation => "Sets the source reference on Chart Studio Cloud for `categoryarray`.",
);

=item * categoryorder

Specifies the ordering logic for the categories in the dimension. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.

=cut

has categoryorder => (
    is => "rw",
    isa => enum(["trace","category ascending","category descending","array"]),
    documentation => "Specifies the ordering logic for the categories in the dimension. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.",
);

=item * description


=cut

has description => (
    is => "ro",
    default => "The dimensions (variables) of the parallel categories diagram.",
);

=item * displayindex

The display index of dimension, from left to right, zero indexed, defaults to dimension index.

=cut

has displayindex => (
    is => "rw",
    isa => "Int",
    documentation => "The display index of dimension, from left to right, zero indexed, defaults to dimension index.",
);

=item * label

The shown name of the dimension.

=cut

has label => (
    is => "rw",
    isa => "Str",
    documentation => "The shown name of the dimension.",
);

=item * ticktext

Sets alternative tick labels for the categories in this dimension. Only has an effect if `categoryorder` is set to *array*. Should be an array the same length as `categoryarray` Used with `categoryorder`.

=cut

has ticktext => (
    is => "rw",
    isa => "ArrayRef|PDL",
    documentation => "Sets alternative tick labels for the categories in this dimension. Only has an effect if `categoryorder` is set to *array*. Should be an array the same length as `categoryarray` Used with `categoryorder`.",
);

=item * ticktextsrc

Sets the source reference on Chart Studio Cloud for `ticktext`.

=cut

has ticktextsrc => (
    is => "rw",
    isa => "Str",
    documentation => "Sets the source reference on Chart Studio Cloud for `ticktext`.",
);

=item * values

Dimension values. `values[n]` represents the category value of the `n`th point in the dataset, therefore the `values` vector for all dimensions must be the same (longer vectors will be truncated).

=cut

has values => (
    is => "rw",
    isa => "ArrayRef|PDL",
    documentation => "Dimension values. `values[n]` represents the category value of the `n`th point in the dataset, therefore the `values` vector for all dimensions must be the same (longer vectors will be truncated).",
);

=item * valuessrc

Sets the source reference on Chart Studio Cloud for `values`.

=cut

has valuessrc => (
    is => "rw",
    isa => "Str",
    documentation => "Sets the source reference on Chart Studio Cloud for `values`.",
);

=item * visible

Shows the dimension when set to `true` (the default). Hides the dimension for `false`.

=cut

has visible => (
    is => "rw",
    isa => "Bool",
    documentation => "Shows the dimension when set to `true` (the default). Hides the dimension for `false`.",
);

=pod

=back

=cut


__PACKAGE__->meta->make_immutable();
1;
