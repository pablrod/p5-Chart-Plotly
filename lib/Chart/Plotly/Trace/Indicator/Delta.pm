package Chart::Plotly::Trace::Indicator::Delta;
use Moose;
use MooseX::ExtraArgs;
use Moose::Util::TypeConstraints qw(enum union);
if (!defined Moose::Util::TypeConstraints::find_type_constraint('PDL')) {
    Moose::Util::TypeConstraints::type('PDL');
}

use Chart::Plotly::Trace::Indicator::Delta::Decreasing;
use Chart::Plotly::Trace::Indicator::Delta::Font;
use Chart::Plotly::Trace::Indicator::Delta::Increasing;


# VERSION

# ABSTRACT: This attribute is one of the possible options for the trace indicator.

=encoding utf-8

=head1 SYNOPSIS

# EXAMPLE: examples/traces/indicator.pl

=head1 DESCRIPTION

This attribute is part of the possible options for the trace indicator.

This file has been autogenerated from the official plotly.js source.

If you like Plotly, please support them: L<https://plot.ly/> 
Open source announcement: L<https://plot.ly/javascript/open-source-announcement/>

Full reference: L<https://plot.ly/javascript/reference/#indicator>

=head1 DISCLAIMER

This is an unofficial Plotly Perl module. Currently I'm not affiliated in any way with Plotly. 
But I think plotly.js is a great library and I want to use it with perl.

=head1 METHODS

=cut

=head2 TO_JSON

Serialize the trace to JSON. This method should be called only by L<JSON> serializer.

=cut

sub TO_JSON {
    my $self = shift; 
    my $extra_args = $self->extra_args // {};
    my $meta = $self->meta;
    my %hash = %$self;
    for my $name (sort keys %hash) {
        my $attr = $meta->get_attribute($name);
        if (defined $attr) {
            my $value = $hash{$name};
            my $type = $attr->type_constraint;
            if ($type && $type->equals('Bool')) {
                $hash{$name} = $value ? \1 : \ 0;
            }
        }
    }
    %hash = (%hash, %$extra_args);
    delete $hash{'extra_args'};
    if ($self->can('type') && (!defined $hash{'type'})) {
        $hash{type} = $self->type();
    }
    return \%hash;
}

=head1 ATTRIBUTES

=over

=cut

=item * decreasing


=cut

has decreasing => (
    is => "rw",
    isa => "Maybe[HashRef]|Chart::Plotly::Trace::Indicator::Delta::Decreasing",
);

=item * font


=cut

has font => (
    is => "rw",
    isa => "Maybe[HashRef]|Chart::Plotly::Trace::Indicator::Delta::Font",
);

=item * increasing


=cut

has increasing => (
    is => "rw",
    isa => "Maybe[HashRef]|Chart::Plotly::Trace::Indicator::Delta::Increasing",
);

=item * position

Sets the position of delta with respect to the number.

=cut

has position => (
    is => "rw",
    isa => enum(["top","bottom","left","right"]),
    documentation => "Sets the position of delta with respect to the number.",
);

=item * prefix

Sets a prefix appearing before the delta.

=cut

has prefix => (
    is => "rw",
    isa => "Str",
    documentation => "Sets a prefix appearing before the delta.",
);

=item * reference

Sets the reference value to compute the delta. By default, it is set to the current value.

=cut

has reference => (
    is => "rw",
    isa => "Num",
    documentation => "Sets the reference value to compute the delta. By default, it is set to the current value.",
);

=item * relative

Show relative change

=cut

has relative => (
    is => "rw",
    isa => "Bool",
    documentation => "Show relative change",
);

=item * suffix

Sets a suffix appearing next to the delta.

=cut

has suffix => (
    is => "rw",
    isa => "Str",
    documentation => "Sets a suffix appearing next to the delta.",
);

=item * valueformat

Sets the value formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.

=cut

has valueformat => (
    is => "rw",
    isa => "Str",
    documentation => "Sets the value formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.",
);

=pod

=back

=cut


__PACKAGE__->meta->make_immutable();
1;
